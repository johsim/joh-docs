#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="orgstyle.css" />
#+TITLE: Tips and tricks
#+AUTHOR: Johanna Simonsson
* ABBRIVATIONS

 * *VCS*: Version Control System

* GLOSSARY

 * *Parse*: Analysera en dataström (input) för att få fram en tolkning. Exempel: Parsa xml kod till python.
 * *DHCP* (/Dynamic Host Configuration Protocol/): DHCP is used for allocation of  dynamic IP addresses to computers in a network.
 * *SSL* (/Secure Sockets Layer/): The SSL protocol is used to encrypt data for secure data transmission.
 * *Bootloader*: En bootloader är en programvara som i ett persondatorsystem av PC-typ tar över efter BIOS och laddar in operativsystemet från hårddisken till primärminnet.
 * *GRUB*: Bootloader för Linux.
 * *BIOS* (/Basic Input/Output System/): Det mest grundläggande programmet som körs i en PC-dator när den startas.
 * *U-boot* (/Universial Bootloader/): Open source, primary boot loader used in embedded devices to package the instructions to boot the device's operating system kernel.
 * *Payload*: Den faktiska datan i ett skickat meddelande, vilket inte inkluderar headers och metadata.
 * *Duplex*: Kommunikation som kan ske två riktningar. Full-duplex indikerar att man kan kommunicera i båda riktningarna samtidigt (telefonsamtal). Halv-duplex indikerar att man kan kan kommunicera i en riktning i taget (walkie-talkie).
 * *CLI*: (/Command Line Interface/) Interface using text. Opposite to /GUI/.
 * *Shell*: User interface to access operation system services.
 * *Shell script*: Scripts to be run in a shell environment, e.g bash, sh, ksh.
 * *Interpreted language*: Executes instructions directly without compiling program into machine-language instructions. The interpreter environment executes the program directly, translating each statement into subroutines already compiled into machine code. Opposite to /Compiled language/. Today languages often utilizes both compilation and interpretation. _Pros/cons_:
   +  + Platform independence.
   +  + Smaller executable program size
   -  - Without static type-checking done by the compiler, programs can be less reliable
   -  - Slower execution than compiled
   -  - Susceptible to code injection attacks
 * *Bytecode*: Instructions set to be executed by a software interpreter. Better performance than direct interpretation of source code. May be executed directly on a virtual machine (interpreter). Examples include: Java (JVM: Java Virtual Machine) and Python.
 * *JIT*: (/Just-in-time/): Compilers that translate byte-code to machine code at runtime.
 * *Source code*: Computer instructions written in a human-readable computer language (text.. lol).
 * *Command prompt*: What a CLI uses to prompt the user to take action, usually ends with ~$~, ~#~, ~:~ or ~>~. Example:
   #+BEGIN_SRC sh
   johanna:Desktop$
   #+END_SRC
 * *Standard streams*: Preconnected imput and output communication channels. If a program is executed in a shell, streams are usually connected to text output. Usually both stdout and stderr is printed as output. Available streams are:
   * Standard input (stdin)
   * Standard output (stdout)
   * Standard error (stderr): To be able to single out error messages for debugging.

 * *Pipeline*: Feed stdout from one program as stdin to next program. Example:
   #+BEGIN_SRC sh
   program1 | program2 | program3
   #+END_SRC

* GENERAL

*PHP Url commands*
 * *?*: Skickar in variabler via url. Exempel: http://mywebsite.se/?variable=hej

*Difference between Centralized VCS and Distributed VCS* \\
In a /Central/ VCS, there idea is that there is only one central copy, and all developers commit only to this central copy. For a DVCS (/Distributed/ VCS), every developer have their own clone of the repository, which can be committed to the main branch. Every distribution of the repository is viewed as equal.

*Regular expressions*\\
Regular expressions, or /regexp/, is a series of characters that is usually used for pattern matching with strings.
| Expression | Explanation                                               |
|------------+-----------------------------------------------------------|
| ~^~        | matches begining of the line                              |
| ~$~        | matches end of the line                                   |
| ~*~        | matches the preceding character 0 or more times           |
| ~+~        | matches the preceding character 1 or more times           |
| ~?~        | matches the preceding character 0 or 1 time               |
| ~.~        | matches any single character except newline               |
| ~(x)~      | matches x and remembers the matching expresssion          |
| ~(?)~      | matches x and does not remember the matching expresssion  |
| ~x(?=y)~   | matches x if it is followed by y                          |
| ~x(?!y)~   | matches x if it is not followed by y                      |
| ~{n}~      | matches previous character repeated n times               |
| ~{n,m}~    | matches previous character repeated between n and m times |
| ~[abc]~    | matches any single character in the brackets              |
| ~[^abc]~   | matches any single character not in the brackets          |
| ~\b~       | matches word boundary                                     |
| ~\B~       | matches non-word boundary                                 |
| ~\d~       | matches a digit                                           |
| ~\D~       | matches a non-digit                                       |
| ~\s~       | matches a whitespace character                            |
| ~\S~       | matches a non-whitespace character                        |
| ~\t~       | matches a tab                                             |
| ~\w~       | matches and alphanumberic character or underscore         |
| ~\W~       | matches character that does not match \w                  |

/Regular expression examples/ \\
#+BEGIN_SRC bash
    [0-9]{4} # matches a year, example: 2010
    [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}.[0-9]{1,3} # matches an ip address, example: 192.168.10.1.
    .?  # .{0,1} = match any char zero or one times
    .* # .{0,} = match any char zero or more times
    .+ # .{1,} = match any char one or more times
#+END_SRC

*GLOB* \\
| Expression | Explanation                                               |
|------------+-----------------------------------------------------------|
| ~*~        | Matches any number of any characters including none       |
| ~?~        | Matches any single character                              |
| ~[abc]~    | Matches one character given in the bracket                |
| ~[a-z]~    | Matches one character from the range given in the bracket |
| ~[!abc]~   | Matches one character that is not given in the bracket    |

/Glob examples/ \\
#+BEGIN_SRC bash
    Law*   # Law, Laws, or Lawyer
    ?at    # Cat, cat, Bat, bat
#+END_SRC

*Web browser*
 * CTRL + TAB: Switch tab
 * CTRL + W: Close tab
* SOFTWARE ARCHITECTURE

*Lots of configuration*: \\
If some part of the code requires a lot of settings to be able to configure something, consider putting all settings in a configuration file. This way it is easier to distinguish the logic of the functions and what is pure configuration.

*General questions of code structure*:\\
It is a good idea to study known modules to get a sense of what is customary when designing code. For example, if a class is designed to handle all communication over a certain session, it might be a good idea to study the 'sockets.py' in Python.

* PROJECT MANAGEMENT
** TOOLS

*Create flowcharts in PowerPoint* \\
To make placement easier, turn on grids:
 * View --> Gridlines

To insert flowchart shapes:
 * Insert --> Shape --> Flowchart

To insert text within a shape:
 * Right-click --> Insert text

Align and place shapes right *before* creating arrows. To add arrows:
 * Click on element --> Press insert arrow --> Drag from corners

To save as PNG:
 * Save as --> Type:PNG --> This slide only
   
* LINUX
** GENERAL
*General tips:*
 * Maximize/Minimize windows: ~F11~
 * Switch between workspaces: ~Ctrl + Shift + ARW~
 * It is possible to lock a window in Ubuntu so it's always possible to see it on all workspaces.

*~source~ vs ~./~* \\
~./script~ runs the script as an executable file, launching a new shell to run it. ~source script~ or ( ~. script~)  reads and executes commands from filename in the current shell environment.

** CLI
Print system information:
#+BEGIN_SRC sh
$ uname -a
#+END_SRC

File information:
#+BEGIN_SRC sh
$ file <filename>
#+END_SRC

If file crashes during startup:
#+BEGIN_SRC sh
$ strace <filename>
#+END_SRC

Overwrite file
#+BEGIN_SRC sh
$ echo 'hej' > file.txt
#+END_SRC

Append to file
#+BEGIN_SRC sh
$ echo 'hej' >> file.txt
#+END_SRC

Watch a command
#+BEGIN_SRC sh
$ watch -n1 df
#+END_SRC

scp over wlan
#+BEGIN_SRC sh
$ scp <localfile> user@localip:/<folder>
#+END_SRC

Open emacs within the terminal window
#+BEGIN_SRC sh
$ emacs -nw file_to_open
#+END_SRC

*Find*\\
Find something in a specific file:
#+BEGIN_SRC sh
$ find / -xdev -type f -print0 | xargs -0 grep -H "800x600"
#+END_SRC

Find files and delete:
#+BEGIN_SRC sh
find . -type f -name '*.o' -exec rm {} +
#+END_SRC

Find will execute grep and substitute {} with all filenames found.
#+BEGIN_SRC sh
find . -exec grep chrome {} \; # Single grep for each file
find . -exec grep chrome {} +  # As many files as possible for one grep 
#+END_SRC

** DEBUG
*apt-get stop working* \\
If apt-get stop working, e.g:

#+BEGIN_SRC sh
W: Failed to fetch http://se.archive.ubuntu.com/ubuntu/dists/utopic-updates/universe/binary-i386/Packages  404  Not Found
#+END_SRC

the linux distr. version might be too old.


*Convert file between DOS and Unix* \\
DOS text files (Windows) traditionally have carriage return and line feed pairs as their newline characters while Unix text files have the line feed as their newline character. If something mysterious happends with files created in different OS then the one you are currently working in, the following might be a good idea:

/Convert text files from the DOS format to the Unix:/
#+BEGIN_SRC sh
dos2unix <file>
#+END_SRC

/Convert text files from the Unix format to the DOS format./
#+BEGIN_SRC sh
unix2dos <file>
#+END_SRC


*If no operations can be done* \\
If no operations can be done on linux, e.g. 'står och tuggar', the harddisk might be mounted as read-only. Start the OS in /Recovery Mode/ (GRUB). Remount root by entering:

#+BEGIN_SRC sh
mount -o remount,rw /
exit
reboot normal
#+END_SRC

** CONF

 * *Set names for IP addresses locally*: Edit /etc/hosts
 * *Grid <3*: https://github.com/ssokolow/quicktile

** PROGRAMS
*ssmtp* \\
sstmp can be used to send mail via CLI, and is a simple MTA.
#+BEGIN_SRC sh
sudo apt-get install ssmtp
#+END_SRC

The configuration can be done via:

#+BEGIN_SRC sh
sudo emacs -nw /etc/ssmtp/ssmtp.conf
#+END_SRC

The configuration should look something like this:
#+BEGIN_SRC sh
# Config file for sSMTP sendmail
#
# The person who gets all mail for userids < 1000
# Make this empty to disable rewriting.
#root=postmaster
root=MyEmailAddress@gmail.com

# The place where the mail goes. The actual machine name is required no
# MX records are consulted. Commonly mailhosts are named mail.domain.com
#mailhub=mail
mailhub=smtp.gmail.com:587
# Where will the mail seem to come from?
#rewriteDomain=
rewriteDomain=gmail.com

# The full hostname
#hostname=MyMediaServer.home
hostname=MyEmailAddress@gmail.com

# Are users allowed to set their own From: address?
# YES - Allow the user to specify their own From: address
# NO - Use the system generated From: address
FromLineOverride=YES
AuthUser=MyEmailAddress@gmail.com
AuthPass=MyPassword
UseTLS=YES
UseSTARTTLS=YES
TLS_CA_File=/etc/ssl/certs/ca-certificates.crt
#+END_SRC

Some extra configuration might be needed if the gmail account have two-step authentication.

Mail can be sent with:
#+BEGIN_SRC sh
cat <mail> | mail -s "Subject" receiver@example.com
#+END_SRC

* C++
*Linking*
 * Linking statically(no space!): ~-Wl,-Bstatic~
 * Show linking dependencies: ~ldd <filename>~

* BASH
*When to use bash scripts* \\
Use bash scripts for small utilities programs or simple wrapper scripts.

Set default value for environment variable if it isn't specified:
#+BEGIN_SRC sh
${ENV_VAR:=true}
#+END_SRC

Redirect standard streams:
#+BEGIN_SRC sh
>  file #redirects stdout to file
1> file #redirects stdout to file
2> file #redirects stderr to file
&> file #redirects stdout and stderr to file
#+END_SRC

Pipe error output (stderr) to nothing, i.e ignore error printouts.
#+BEGIN_SRC sh
2>/dev/null
#+END_SRC

Execution flow with ~||~:
#+BEGIN_SRC sh
program || echo "Something went wrong" #Only executes if exit code != 0
#+END_SRC

Execution flow with ~&&~:
#+BEGIN_SRC sh
program && echo "Everything went as expected" # Only executes if exit code == 0
#+END_SRC


*Bash input handling* \\
 * ~$#~: Stores the number of command-line arguments that were passed to the shell program.
 * ~$?~: Stores the exit value of the last command that was executed.
 * ~$0~: Stores the first word of the entered command (the name of the shell program).
 * ~$*~: Stores all the arguments that were entered on the command line ($1 $2 ...).
 * "$@": Stores all the arguments that were entered on the command line, individually quoted ("$1" "$2" ...).

#+BEGIN_SRC sh
./command -yes -no /home/username

# $# = 3
# $* = -yes -no /home/username
# $@ = array: {"-yes", "-no", "/home/username"}
# $0 = ./command, $1 = -yes etc.

#+END_SRC
    
* EMACS
** Generally
*Commands*

| Commands          | Description                                  |
|-------------------+----------------------------------------------|
| ~M-%~             | Search Replace (space = next)                |
| ~C-M-%~           | Regexp Search Replace                        |
| ~C-s RET C-y RET~ | Paste a specific string to search for        |
| ~C-e/a~           | End/beginning of line                        |
| ~C-x o~           | Change buffer                                |
| ~C-l~             | Centrera skärmen runt                        |
| ~C-<~             | Beginning of doc                             |
| ~C->~             | End of doc                                   |
| ~C-SPC~           | Starta markering                             |
| ~M-a/e~           | Hoppa stycken                                |
| ~C-x C-v~         | revert buffer, hämtar filen igen             |
| ~C-x C-+/-~       | Ändrar sizen på fonten                       |
| ~C-x 0~           | delete current window                        |
| ~M-\~             | Delete horizontal space                      |
| ~C-x C-f M-f~     | Wide search with glob in current buffer dir. |
| ~C-s/C-r~         | Rotate beween searches in ido-find-file      |


*Extended commands*
| Commands                 | Descriptions                 |
|--------------------------+------------------------------|
| ~M-x whitespace-cleanup~ | Clean whitespace after lines |
| ~M-x shell RET~          | Shell in buffer              |
| ~C-u M-x shell~          | Öppnar ett andra shell       |


*Ta bort intabbning/spaces* \\
/Region/
  1. Mark region
  2. ~C-x TAB~
  3. Move with ARW(l/r) or SHIFT + ARW(l/r)

/Repeated/
  1. Mark region
  2. ~C-u +/- NOF_TIMES~ (add/remove spaces)
  3. ~C-x TAB~

*neotree* \\
Gives a tree structure in Emacs.
| Command       | Description         |
|---------------+---------------------|
| ~M-x neotree~ | Open neotree        |
| ~C-c C-c~     | Change root         |
| ~TAB~         | Open/close dirs     |
| ~H~           | Toggle hidden files |
| ~A~           | Expands window      |

*TAGS*\\
Generate a tags file which makes a list with what definitions you can jump to. \\

| Command | Description                      |
|---------+----------------------------------|
| ~M-.~   | Go-to tag                        |
| ~M-*~   | Go back to where tag was invoked |

Generate a tag file for all python files in the current dir.
#+BEGIN_SRC bash
find . -name "*.py" -print | etags -
#+END_SRC

** Org-Mode

*Emphasis and monospace*
#+BEGIN_EXAMPLE
  * *FETSTILT*
  * /KURSIVT/
  * _UNDERSCORE_
  * =verbatism=
  * ~code~
#+END_EXAMPLE

*Enter easy templates* \\

 * Goto an empty line and insert: ~<s + TAB~

 * This will insert:
  #+BEGIN_EXAMPLE
    #+BEGIN_SRC identifier

    #+END_SRC
  #+END_EXAMPLE

Some of the supported languages are:

#+CAPTION: Supported languages in source mode
#+ATTR_HTML: :border 2
| Language   | Identifier   |
|------------+--------------|
| C          | ~C~          |
| C++        | ~cpp~        |
| CSS        | ~css~        |
| Emacs Lisp | ~emacs-lisp~ |
| Java       | ~java~       |
| LaTeX      | ~latex~      |
| Make       | ~makefile~   |
| Org        | ~org~        |
| Python     | ~python~     |
| Shell      | ~sh~         |

*** LATEX

Install in linux:
#+BEGIN_SRC sh
$ sudo apt-get install texlive
#+END_SRC

*Spell check* \\
#+BEGIN_SRC emacps-lisp
M-x flyspell-buffer
#+END_SRC

*Headers*
#+BEGIN_SRC latex
#+TITLE: Title
#+AUTHOR: Johanna Simonsson
#+DATE: <Overwrite default date>
#+END_SRC


*List of tables*
#+BEGIN_EXAMPLE
#+TOC: tables
#+END_EXAMPLE

*Glossary without numbering*
#+BEGIN_SRC latex
\section*{Glossary}
#+END_SRC

*Set line wrap* \\
För att se till att en rad automatiskt fortsätter på nästa rad kan man göra två saker:

#+BEGIN_SRC emacs-lisp
M-x visual-line-mode
#+END_SRC

För att sätta margin på buffern sätt ~fill-column~

#+BEGIN_SRC emacs-lisp
 C-x f RET 120
#+END_SRC

För att aktivera ~window-margin-mode~ skriv:

#+BEGIN_SRC emacs-lisp
M-x window-margin-mode
#+END_SRC

*References* \\
För att referera/länka till vad som helst.

#+BEGIN_EXAMPLE
[[ reference ]]
#+END_EXAMPLE

Detta kan inkludera:
 * Headings (hela namnet)
 * Figures (path-to-figure)
 * Tables etc. (label-name)
 * etc.

*Lås placement för figure*
#+BEGIN_EXAMPLE
#+ATTR_LaTeX: placement=[H]
#+END_EXAMPLE

*Referera inom dokumentet* \\ 
Sätt namn/label på det som ska refereras
#+BEGIN_EXAMPLE
#+LABEL: tab:test
#+END_EXAMPLE

*How to add footnotes*
#+BEGIN_SRC
C-c C-x f
#+END_SRC

*Ny sida*
#+BEGIN_SRC latex
\newpage
#+END_SRC

*Ingen intabbning vid ny rad*
#+BEGIN_SRC latex
\noindent
#+END_SRC

* DOCKER
  
*Free up space*
 * Remove images
  #+BEGIN_SRC sh
  docker images
  docker rmi ID
  #+END_SRC

 * Stop processes
  #+BEGIN_SRC sh
  docker ps -a
  docker stop ID
  docker rm -v ID  #-v flag is important!
  #+END_SRC

* PYTHON

*Python shell* \\
Continue line:
#+BEGIN_SRC python
print("hej" \
      "då")
#+END_SRC

Open the python terminal after executing script.py:
#+BEGIN_SRC python
python -i script.py
#+END_SRC

*General functions*

Gives the dir separator in the current OS.
#+BEGIN_SRC python
os.sep
#+END_SRC

Find string between 'def and '('
#+BEGIN_SRC python
re.search('def(.*)\(', string).group(1)
#+END_SRC

*Class vs. instance variables*
#+BEGIN_SRC python
class Class():
    class_var = 1 # Belongs to class. Shared by all instances

    def __init__(self, instance_var):
        self.instance_var = instance_var # Belongs to object instance
#+END_SRC

*Notation of error in docstring*
#+BEGIN_SRC python
"""
:raises AssertError:
"""
#+END_SRC


*Nested functions*
#+BEGIN_SRC python

def function():
   def nested_function():
      do_stuff()

   nested_function()
#+END_SRC

When a function is defined within another function, it's called a nested function. 
This implementation slows the main function down, because it'll have to define and recompile the nested
function every time it's called. Therefore it's better to define the nested funciton as a private function (indicate with '_').

Example:
#+BEGIN_SRC python
def function():
   _private_function()

def _private_function():
   do_stuff()
#+END_SRC

*Regex replace sub string*
#+BEGIN_SRC python
>>> re.sub(r'test_(.*)(\[.*\])', r'a:\1 b:\2 ', 'test_event_no_pset_selected[a]')
>>> 'a:event_no_pset_selected b:[a]'
#+END_SRC

Returns normal string if no match is made.
#+BEGIN_SRC python
# r = raw string
# (...) = parathesis creates groups. (.*) = group 1
# \1 = first group matched
#+END_SRC


*Regex with verbose flag, for extra comments*
#+BEGIN_SRC python
charref = re.compile(r"""
 &[#]                # Start of a numeric entity reference
 (
     0[0-7]+         # Octal form
   | [0-9]+          # Decimal form
   | x[0-9a-fA-F]+   # Hexadecimal form
 )
 ;                   # Trailing semicolon
""", re.VERBOSE)
#+END_SRC

** PYTEST

*hook* \\
En hook är där man som användare kan interagera/ändra någonting som redan
pågår i ett program/system.

  1. *Create Something*
  2. /Hook implemented --> modify created/
  3. *Continue*

*@pytest.fixture(scope="function")* \\
~def ctrl(request, ctrl):~ \\
 * Scope för fixturer berättar hur länge en fixture ska 'hålla'.
 * Request-input till en fixture gör at man kan lägga till en finalizer (teardown)

*@pytest.mark.timeout(60)* \\
Sätt time-out på långtidstester annars så dödas de av default-time-outen (satt till 0.5-1h)

* PYCHARM
| Command              | Explanation         |
|----------------------+---------------------|
| Alt-<ARW>            | Switch between tabs |
| Ctrl-Alt-G           | GoTo Declaration    |
| Ctrl-Alt-Shift-Left  | Go Back    (Custom) |
| Ctrl-Alt-Shift-Right | Go Forward (Custom) |
| Ctrl-x 0, Ctrl-x k   | Close tab           |
| Ctrl-NumPad-         | Collapse code       |
| Ctrl-NumPad+         | Expand code         |
| Ctrl-Shift-Numpad-   | Collapse all code   |
| Ctrl-Shift-Numpad+   | Expand all code     |
| Ctrl-Home            | Beginning of file   |
| Ctrl-End             | End of file         |
| F11                  | Add bookmark        |
| Shift-F11            | Show bookmark list  |

* VIRTUALBOX

*Shrink VDMK size* \\
If one is using a dynamically expanding image for their hard drive, where you set the maximum size of the disk,
the system will only grow to fill that space if required. Unfortunately, whilst VirtualBox will dynamically
expand the hard drive as it’s required, it won’t dynamically shrink it again if you free up space in the VM.
To shrink the VM:

1. Free up as much space as possible on the guest system.

2. Install zerofree on the *Guest* system:
  #+BEGIN_SRC sh
  $ sudo apt-get install zerofree
  #+END_SRC

3. Start the *VM* (Virtual Machine) in *recovery mode* (from GRUB)

4. Find out where / is mounted by studying the output of: (usually /dev/sda1)
  #+BEGIN_SRC sh
     $ mount
  #+END_SRC

5. If the boot device is mounted as rw, change it to read-only by entering:
  #+BEGIN_SRC sh
     $ mount -n -o remount,ro -t ext2 /dev/sda1 /
  #+END_SRC

6. To zero out the free space so the compact tool can work, enter:
  #+BEGIN_SRC sh
     $ zerofree /dev/sda1
  #+END_SRC

7. *Shutdown* the VM.

8. Open a command prompt on the *Host* Machine (Windows) and navigate to the vmdk-file.

9. Clone the vmdk-file to vdi format to be able to compact it:
  #+BEGIN_SRC sh
     $ vboxmanage clonehd mydisk.vmdk cloneddisk.vdi --format VDI
  #+END_SRC

10. To shrink the disk, run:
  #+BEGIN_SRC sh
      $ vboxmanage modifyhd --compact cloneddisk.vdi
  #+END_SRC

11. Clone the disk again to the right format:
  #+BEGIN_SRC sh
      $ vboxmanage clonehd cloneddist.vdi newdisk.vmdk --format VMDK
  #+END_SRC
* VCS
** HG
To check commits done to a file/directory:
#+BEGIN_SRC sh
hg status <file>
#+END_SRC

Remove all non-committed files (good when rebuilding)
#+BEGIN_SRC sh
hg purge
#+END_SRC

** GIT
Clone a repository:
#+BEGIN_SRC sh
git clone https://github.com/johsim/joh-conf
#+END_SRC

If the network is behind a HTTP-proxy, try specifying the default one:
#+BEGIN_SRC sh
git config --global http.proxy http://proxy1:80
#+END_SRC

To configure local variables:
#+BEGIN_SRC sh
git config --global user.name "Joh Sim"
git config --global user.email johsim@example.com
#+END_SRC

To configure email for a local repository:
#+BEGIN_SRC sh
cd <repo>
git config user.email johsim@example.com
#+END_SRC

To commit all changes to the stagig area and add a message:
#+BEGIN_SRC sh
git commit -a -m 'My message'
#+END_SRC

Push to remote repository:
#+BEGIN_SRC sh
git push origin master
#+END_SRC

To add a specific file:
#+BEGIN_SRC sh
git add <filename>
#+END_SRC

Fetch from remote repository (pull in hg):
#+BEGIN_SRC sh
git fetch
#+END_SRC

*Note:* The option ~git pull~ will fetch and merge with the local branch.\\

Check status for repo:
#+BEGIN_SRC sh
git status
#+END_SRC

List all branches:
#+BEGIN_SRC sh
git branch
#+END_SRC

Switch between branches:
#+BEGIN_SRC sh
git checkout <branch>
#+END_SRC

Origin is a default name for a remote repository. Show remote repositories:
#+BEGIN_SRC sh
git remote -v
#+END_SRC

Connect a commit to an issue:
#+BEGIN_SRC sh
git commit -m 'Commit connected to issue #X' 
#+END_SRC

Close an issue with a commit:
#+BEGIN_SRC sh
git commit -m 'Commit to fix #X' 
#+END_SRC

Supported variants are:

 * ~fix #X~
 * ~fixes #X~
 * ~fixed #X~
 * ~close #X~
 * ~closes #X~
 * ~closed #X~
 * ~resolve #X~
 * ~resolves #X~
 * ~resolved #X~

